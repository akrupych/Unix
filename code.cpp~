#include <iostream>
#include <dirent.h>
#include <sys/stat.h>
#include <string.h>

using namespace std;

class DirFinder
{
 string the_oldest_path;
 int the_oldest_time;

 void find_recursive (string dir)
 {
  DIR *opened;
  struct dirent *current;

  if ((opened = opendir(dir.c_str())) != NULL)
  {
   while ((current = readdir(opened)) != NULL)
   {
    if (current->d_type == DT_DIR)
    {
     string full_path = current->d_name;

     if (!full_path.compare(".") || !full_path.compare(".."))
      continue;

     full_path = dir + "/" + full_path;

     struct stat attr;
     stat(full_path.c_str(), &attr);

     if (the_oldest_path.empty() || attr.st_ctime < the_oldest_time)
     {
      the_oldest_path = full_path;
      the_oldest_time = attr.st_ctime;
     }

     find_recursive(full_path);
    }
   }
  }
 }

public:

 string the_oldest_subdir (string dir)
 {
  /*the_oldest_path = dir;
  struct stat attr;
  stat(dir.c_str(), &attr);
  the_oldest_time = attr.st_ctime;*/
  the_oldest_path.clear();
  find_recursive(dir);
  return the_oldest_path;
 }

};

int main(int args_num, char** args)
{
 if (args_num != 2)
 {
  cout << "Please pass one argument with the path to be watched" << endl;
 }
 else
 {
  DirFinder finder;
  string result = finder.the_oldest_subdir(string(args[1]));
  if (result.empty()) cout << "Sorry, no subdirectories can be found" << endl;
  else cout << result << endl;
 }
 return 0;
}
